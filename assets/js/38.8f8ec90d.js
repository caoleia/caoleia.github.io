(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{381:function(v,P,_){"use strict";_.r(P);var t=_(42),e=Object(t.a)({},(function(){var v=this,P=v.$createElement,_=v._self._c||P;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("#TCP/IP\n"),_("code",[v._v("TCP/IP并不是单纯的指某一种网络协议")])]),v._v(" "),_("p",[v._v("互联网通信相关联的协议集合通常被称为TCP/IP协议族,简称TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和IP（网际协议）,为该家族中最早通过的标准。")]),v._v(" "),_("p",[v._v("TCP/IP提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层OSI模型。")]),v._v(" "),_("h2",{attrs:{id:"分层管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分层管理"}},[v._v("#")]),v._v(" 分层管理")]),v._v(" "),_("p",[v._v("TCP/IP协议族里最重要的一点就是分层，按层次从高到低分别分为以下4层：应用层、传输层、网络层、数据链路层。")]),v._v(" "),_("h3",{attrs:{id:"应用层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[v._v("#")]),v._v(" 应用层")]),v._v(" "),_("p",[v._v("作用：提供了很多高层协议,来实现应用之间不同性质的通信活动。(自己总结)")]),v._v(" "),_("p",[_("code",[v._v("TELNET")]),v._v("(TELecommunications NETwork,虚拟终端协议)：是Internet远程登陆服务的标准协议和主要方式，它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。Telnet是常用的远程控制Web服务器的方法。"),_("code",[v._v("端口号为23")])]),v._v(" "),_("p",[_("code",[v._v("FTP")]),v._v("(File Transfer Protocol,文件传输协议): 端口号20和21一个端口用于控制，一个端口用于传输数据")]),v._v(" "),_("p",[_("code",[v._v("SMTP")]),v._v("(Simple Mail Transfer Protocol,电子邮件传输协议):发送邮件,端口号25")]),v._v(" "),_("p",[_("code",[v._v("POP3")]),v._v("(Post Office Protocol - Version 3,邮局协议版本3):接收邮件,端口号110")]),v._v(" "),_("p",[_("code",[v._v("DNS")]),v._v("(Domain Name Service,域名服务):端口号53")]),v._v(" "),_("p",[_("code",[v._v("HTTP")]),v._v("(HyperText Transfer Protocol,超文本传送协议):端口号80")]),v._v(" "),_("p",[_("code",[v._v("HTTPS")]),v._v("(Hyper Text Transfer Protocol over Secure Socket Layer):端口号43")]),v._v(" "),_("h3",{attrs:{id:"传输层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[v._v("#")]),v._v(" 传输层")]),v._v(" "),_("p",[v._v("提供处理网络连接中的两台计算机之间的数据传输。这一层负责传送数据，并且确定数据已被送达并接收。")]),v._v(" "),_("p",[v._v("传输层有两个端到端的协议:TCP(传输控制协议),UPD(用户数据报协议)")]),v._v(" "),_("p",[v._v("大部分应用层协议都是建立在TCP或UDP之上的")]),v._v(" "),_("h4",{attrs:{id:"tcp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[v._v("#")]),v._v(" TCP")]),v._v(" "),_("p",[v._v("TCP是面向连接的协议，它提供可靠的报文传输(字节流)和对上层应用的连接服务。")]),v._v(" "),_("p",[v._v("除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。")]),v._v(" "),_("p",[v._v("当应用程序希望通过TCP与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方“握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。")]),v._v(" "),_("p",[v._v("这个全双工的通信将占用两个计算机之间的通信线路，直到它被一方或双方关闭为止。")]),v._v(" "),_("p",[v._v("TCP连接的建立("),_("code",[v._v("三次握手")]),v._v("):\n"),_("code",[v._v("TCP报文头中会含有源IP、端口号与目的端IP、端口号。一个IP地址和一个端口号也称为一个socket，socket可唯一确定互联网络中每个TCP连接的双方。")])]),v._v(" "),_("p",[v._v("第一次\n第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认\n第二次\n第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；\n第三次\n第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手")]),v._v(" "),_("p",[v._v("对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的报文段）。\nTCP关闭连接的步骤如下：\n第一步，当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN表示英文finish）。\n第二步，主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是先向主机A发送一个确认序号ACK，同时通知自己相应的应用程序：对方要求关闭连接（先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段）。\n第三步，主机B的应用程序告诉TCP：我要彻底的关闭连接，TCP向主机A送一个FIN报文段。\n第四步，主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。")]),v._v(" "),_("h4",{attrs:{id:"udp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[v._v("#")]),v._v(" UDP")]),v._v(" "),_("p",[v._v("UDP是面向无连接的不可靠传输的协议，因而具有资源消耗小，处理速度快的优点，所以通常音频、视频和普通数据在传送时使用UDP较多，因为它们即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。比如QQ就是使用的UDP协议。")]),v._v(" "),_("p",[v._v("UDP(User Datagram Protocol)传输与IP传输非常类似。你可以将UDP协议看作IP协议暴露在传输层的一个接口。UDP协议同样以数据包(datagram)的方式传输，但UDP协议是不可靠的(unreliable)。那么，我们为什么不直接使用IP协议而要额外增加一个UDP协议呢？ 一个重要的原因是IP协议中并没有端口(port)的概念。IP协议进行的是IP地址到IP地址的传输，这意味者两台计算机之间的对话。但每台计算机中需要有多个通信通道，并将多个通信通道分配给不同的进程使用。一个端口就代表了这样的一个通信通道。UDP协议实现了端口，从而让数据包可以在送到IP地址的基础上，进一步可以送到某个端口。")]),v._v(" "),_("p",[v._v('尽管UDP协议非常简单，但它的产生晚于更加复杂的TCP协议。早期的网络开发者开发出IP协议和TCP协议分别位于网络层和传输层，所有的通信都要先经过TCP封装，再经过IP封装(应用层->TCP->IP)。开发者将TCP/IP视为相互合作的套装。但很快，网络开发者发现，IP协议的功能和TCP协议的功能是相互独立的。对于一些简单的通信，我们只需要“Best Effort”式的IP传输就可以了，而不需要TCP协议复杂的建立连接的方式(特别是在早期网络环境中，如果过多的建立TCP连接，会造成很大的网络负担，而UDP协议可以相对快速的处理这些简单通信)。UDP协议随之被开发出来，作为IP协议在传输层的"傀儡"。这样，网络通信可以通过应用层->UDP->IP的封装方式，绕过TCP协议。由于UDP协议本身异常简单，实际上只为IP传输起到了桥梁的作用。')]),v._v(" "),_("p",[v._v("Socket是操作系统提供的一个编程接口，它用来代表某个网络通信。应用程序通过socket来调用系统内核中处理网络协议的模块，而这些内核模块会负责具体的网络协议的实施。这样，我们可以让内核来接收网络协议的细节，而我们只需要提供所要传输的内容就可以了，内核会帮我们控制格式，并进一步向底层封装。因此，在实际应用中，我们并不需要知道具体怎么构成一个UDP包，而只需要提供相关信息(比如IP地址，比如端口号，比如所要传输的信息)，操作系统内核会在传输之前会根据我们提供的相关信息构成一个合格的UDP包(以及下层的包和帧)。")]),v._v(" "),_("h3",{attrs:{id:"网络层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[v._v("#")]),v._v(" 网络层")]),v._v(" "),_("p",[v._v("数据包是TCP/IP协议中通信传输的数据单位，在计算机之间通过多台计算机或网络设备进行传输时,网络层所起的作用就是在中多的选项内选择一条传输路线。")]),v._v(" "),_("p",[v._v("IP协议:是网络层的核心，是整个Internet的协议基础。负责分配IP地址，提供路由")]),v._v(" "),_("p",[v._v("ARP协议:地址解析协议，在数据报向下一个站点传递时，负责将IP地址转换为物理地址(MAC地址)")]),v._v(" "),_("p",[v._v("RARP协议：反向地址转化协议，作用于ARP相反，负责将物理层地址转换为IP地址")]),v._v(" "),_("h3",{attrs:{id:"数据链路层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据链路层"}},[v._v("#")]),v._v(" 数据链路层")]),v._v(" "),_("p",[v._v("用来处理连接网络的硬件部分,驱动、网卡等等硬件上的范畴均在数据链路层的作用范围之内。")]),v._v(" "),_("h1",{attrs:{id:"持久连接、管线化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持久连接、管线化"}},[v._v("#")]),v._v(" 持久连接、管线化")]),v._v(" "),_("p",[v._v("HTTP协议的初始版本中，每进行一次HTTP通信就要断开一次TCP连接。")]),v._v(" "),_("p",[v._v("在HTTP/1.1中所有的连接默认都是持久连接，使请求以管线化方式发送成为可能。从前发送请求后需要等待并收到响应才能发送下一个请求。管线化技术出现后不用等待响应就可以直接发送下一个请求。")]),v._v(" "),_("p",[v._v("所以不需要担心多次请求建立连接的消耗，不必刻意一个API返回很多信息。程序设计时可以放心分多次请求，每个API尽量保持单一的职责就好。")])])}),[],!1,null,null,null);P.default=e.exports}}]);