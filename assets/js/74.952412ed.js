(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{418:function(t,a,s){"use strict";s.r(a);var v=s(42),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"排序二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排序二叉树"}},[t._v("#")]),t._v(" 排序二叉树")]),t._v(" "),s("p",[t._v("排序二叉树也是二叉树，但它没有重复元素，而且是有序的二叉树。")]),t._v(" "),s("p",[t._v("对于每个节点而言：")]),t._v(" "),s("ul",[s("li",[t._v("如果左子树不为空，则左子树上所有节点都小于该节点")]),t._v(" "),s("li",[t._v("如果右子树不为空，则右子树上的所有节点都大于该节点")])]),t._v(" "),s("h1",{attrs:{id:"树的存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树的存储"}},[t._v("#")]),t._v(" 树的存储")]),t._v(" "),s("p",[t._v("计算机的内存是线性的, 而树是非线性的数据结构,如何将非线性的树状结构在线性的内存中存储起来,这是一个值得探讨的问题。目前主要有以下几种存储方式：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("双亲表示法：\n实现:通常用一个二维数组，在存储结点的同时也将对应节点的父节点存储进来。\n特点：找父节点容易、找子节点难。\n"),s("img",{attrs:{src:"/images/ref/%E7%BA%A2%E9%BB%91%E6%A0%9101.png",alt:"Alt text"}})])]),t._v(" "),s("li",[s("p",[t._v("孩子表示法：\n实现：每个结点都存储在一个二维数组的第一列里面，多个子节点之间以链表方式连接，最后一个子节点的指向为NULL，数组的第二个元素指向其子节点链表的起始地址。"),s("br"),t._v("\n特点：找子节点容易，找父节点难。\n"),s("img",{attrs:{src:"/images/ref/%E7%BA%A2%E9%BB%91%E6%A0%9102.png",alt:"Alt text"}})])]),t._v(" "),s("li",[s("p",[t._v("双亲孩子表示法：\n实现：将双亲表示法与孩子表示法综合起来，既存储父节点的下标，又指向子节点链表。\n特征：找父节点与子节点都比较方便，但相对前面两种复杂度有一定程度的提升。\n"),s("img",{attrs:{src:"/images/ref/%E7%BA%A2%E9%BB%91%E6%A0%9103.png",alt:"Alt text"}})])])]),t._v(" "),s("h1",{attrs:{id:"二叉树存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树存储"}},[t._v("#")]),t._v(" 二叉树存储")]),t._v(" "),s("p",[t._v("二叉树的顺序存储结构:\n二叉树的顺序存储结构中节点的存放次序是：对该树中每个节点进行编号，其编号从小到大的顺序就是节点存放在连续存储单元的先后次序。")]),t._v(" "),s("p",[t._v("若把二叉树存储到一维数组中,则该编号就是下标值加1。\n树中各节点的编号与等高度的完全二叉树中对应位置上节点的编号相同。\n顺序二叉树，如下图：\n"),s("img",{attrs:{src:"/images/ref/%E7%BA%A2%E9%BB%91%E6%A0%9104.png",alt:"Alt text"}})]),t._v(" "),s("p",[t._v("二叉树的链式存储结构:\n在二叉树的链接存储中，节点的结构如下:")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \nElemType data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("node")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" BTNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("其中，data表示值域，用于存储对应的数据元素，lchild和rchild分别表示左指针域和右指针域，用于分别存储左孩子节点和右孩子节点（即左、右子树的根节点）的存储位置。")]),t._v(" "),s("p",[t._v("红黑树（R-B Tree），一种二叉查找树，但在每个结点上增加一个存储位表示结点的颜色，可以是Red或Black。\n通过对任何一条从根到叶子的路径上各个结点着色方式的限制，红黑树确保没有一条路径会比其他路径长出俩倍，因而是接近平衡的。")]),t._v(" "),s("h1",{attrs:{id:"基本算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本算法"}},[t._v("#")]),t._v(" 基本算法")]),t._v(" "),s("h2",{attrs:{id:"查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[t._v("#")]),t._v(" 查找")]),t._v(" "),s("p",[t._v("排序二叉树优点：查找元素很方便、高效，与二分法类似")]),t._v(" "),s("ol",[s("li",[t._v("首先与根节点比较,如果相同就找到了")]),t._v(" "),s("li",[t._v("如果小于根节点，则在左子树中递归查找")]),t._v(" "),s("li",[t._v("如果大于根节点，则到右子树中递归查找")])]),t._v(" "),s("p",[t._v("此外，还可以方便的找出最小值与最大值(最左边的点、最右边的点)")]),t._v(" "),s("h2",{attrs:{id:"遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[t._v("#")]),t._v(" 遍历")]),t._v(" "),s("p",[t._v("也可以方便的按顺序遍历。用递归的方式：")]),t._v(" "),s("ol",[s("li",[t._v("访问左子树")]),t._v(" "),s("li",[t._v("访问当前节点")]),t._v(" "),s("li",[t._v("访问右子树")])]),t._v(" "),s("h2",{attrs:{id:"插入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[t._v("#")]),t._v(" 插入")]),t._v(" "),s("p",[t._v("插入元素首先要找到插入位置，即当前要插入节点的父节点")]),t._v(" "),s("ol",[s("li",[t._v("与当前节点比较，如果相同，表示已经存在了不能插入")]),t._v(" "),s("li",[t._v("如果小于当前节点，则到左子树中寻找，如果左子树为空，则当前节点即为要找的父节点")]),t._v(" "),s("li",[t._v("如果大于当前节点，则到右子树中寻找，如果右子树为空，则当前节点即为要找的父节点")])]),t._v(" "),s("p",[t._v("找到父节点后，即可插入，如果插入元素小于父节点，则作为左孩子插入，否则作为右孩子插入。")]),t._v(" "),s("h2",{attrs:{id:"删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),s("p",[t._v("删除最复杂，有三种情况")]),t._v(" "),s("ol",[s("li",[t._v("节点为叶子节点")]),t._v(" "),s("li",[t._v("节点只有一个孩子节点")]),t._v(" "),s("li",[t._v("节点有两个孩子节点")])]),t._v(" "),s("p",[t._v("节点为叶子节点： 直接删除，修改父节点对应的孩子节点为空")]),t._v(" "),s("p",[t._v("节点只有一个孩子节点： 让父节点与要删除节点的子节点建立链接")]),t._v(" "),s("p",[t._v("节点有两个孩子节点： 找到后继节点，替换待删除节点，然后再删除后继节点")]),t._v(" "),s("h1",{attrs:{id:"平衡的排序二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡的排序二叉树"}},[t._v("#")]),t._v(" 平衡的排序二叉树")]),t._v(" "),s("p",[t._v("排序二叉树的形状与插入和删除的顺序密切相关，极端情况下会退化为一个链表\n"),s("img",{attrs:{src:"/images/ref/%E7%BA%A2%E9%BB%91%E6%A0%9105.png",alt:"Alt text"}})]),t._v(" "),s("p",[t._v("退化为链表后，排序二叉树的优点就都没有了。高度不平衡效率也会变得很低。")]),t._v(" "),s("p",[s("code",[t._v("平衡的定义：任何节点的左右子树的高度差最多为一")]),t._v(" 称为AVL树。\n具有相应的算法，可以在插入和删除节点时，通过一次或多次旋转操作来重新平衡树。")]),t._v(" "),s("h1",{attrs:{id:"红黑树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),s("p",[t._v("在TreeMap的实现中，用的并不是AVL树，而是红黑树。\n与AVL树类似，红黑树也是一种平衡的排序二叉树，在插入和删除节点时通过旋转操作来平衡的。\n但它并不是高度平衡的，而是大致平衡的。")]),t._v(" "),s("p",[s("code",[t._v("大致平衡：确保任意一条从根到叶子节点的路径，没有任何一条路径的长度会比其他路径长过两倍。")]),t._v("\n红黑树减弱了对平衡的要求，但降低了保持平衡需要的开销，在实际应用中统计性能高于AVL树。")]),t._v(" "),s("p",[t._v("它是如何保证一棵n个结点的红黑树的高度始终保持在logn的呢？这就引出了红黑树的5个性质：")]),t._v(" "),s("ol",[s("li",[t._v("每个结点要么是红的要么是黑的。")]),t._v(" "),s("li",[t._v("根结点是黑的。")]),t._v(" "),s("li",[t._v("每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。")]),t._v(" "),s("li",[t._v("如果一个结点是红的，那么它的两个儿子都是黑的。")]),t._v(" "),s("li",[t._v("对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。")])]),t._v(" "),s("p",[t._v("正是红黑树的这5条性质，使一棵n个结点的红黑树始终保持了logn的高度，从而也就解释了上面所说的“红黑树的查找、插入、删除的时间复杂度最坏为O(log n)”这一结论成立的原因。\n"),s("img",{attrs:{src:"/images/ref/%E7%BA%A2%E9%BB%91%E6%A0%910.png",alt:"Alt text"}})]),t._v(" "),s("p",[t._v("对于AVL树和红黑树，他们保持平衡的细节都是比较复杂的。\n我们只需要知道他们都是排序二叉树，通过在插入和删除时执行开销不大的旋转操作保持了树的高度平衡或大致平衡，从而保证了树的查找效率。")])])}),[],!1,null,null,null);a.default=_.exports}}]);