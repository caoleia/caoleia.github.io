(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{365:function(t,n,o){"use strict";o.r(n);var a=o(42),c=Object(a.a)({},(function(){var t=this,n=t.$createElement,o=t._self._c||n;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"juc工具类-countdownlatch详解"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#juc工具类-countdownlatch详解"}},[t._v("#")]),t._v(" JUC工具类: CountDownLatch详解")]),t._v(" "),o("p"),o("div",{staticClass:"table-of-contents"},[o("ul",[o("li",[o("a",{attrs:{href:"#countdownlatch介绍"}},[t._v("CountDownLatch介绍")])])])]),o("p"),t._v(" "),o("blockquote",[o("p",[t._v("CountDownLatch(门栓)底层也是由AQS，用来同步一个或多个任务的常用并发工具类，强制它们等待由其他任务执行的一组操作完成")])]),t._v(" "),o("h2",{attrs:{id:"countdownlatch介绍"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch介绍"}},[t._v("#")]),t._v(" CountDownLatch介绍")]),t._v(" "),o("p",[t._v("从源码可知，其底层是由AQS提供支持，所以其数据结构可以参考AQS的数据结构，而AQS的数据结构核心就是两个虚拟队列: 同步队列sync queue 和条件队列condition queue，不同的条件会有不同的条件队列。CountDownLatch典型的用法是将一个程序分为n个互相独立的可解决任务，并创建值为n的CountDownLatch。当每一个任务完成时，都会在这个锁存器上调用countDown，等待问题被解决的任务调用这个锁存器的await，将他们自己拦住，直至锁存器计数结束")]),t._v(" "),o("p",[t._v("因为是基于AQS阻塞队列来实现的，所以可以让多个线程都阻塞在state=0条件上，通过CountDown()一直累减state,减到0后一次性唤醒所有线程。")])])}),[],!1,null,null,null);n.default=c.exports}}]);