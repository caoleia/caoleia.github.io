(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{367:function(r,t,c){"use strict";c.r(t);var a=c(42),e=Object(a.a)({},(function(){var r=this,t=r.$createElement,c=r._self._c||t;return c("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[c("h1",{attrs:{id:"juc工具类-cyclicbarrier详解"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#juc工具类-cyclicbarrier详解"}},[r._v("#")]),r._v(" JUC工具类: CyclicBarrier详解")]),r._v(" "),c("p"),c("div",{staticClass:"table-of-contents"},[c("ul",[c("li",[c("a",{attrs:{href:"#cyclicbarrier简介"}},[r._v("CyclicBarrier简介")])])])]),c("p"),r._v(" "),c("blockquote",[c("p",[r._v("CyclicBarrier（公共屏障点）底层是基于ReentrantLock和AbstractQueuedSynchronizer来实现的")])]),r._v(" "),c("h2",{attrs:{id:"cyclicbarrier简介"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier简介"}},[r._v("#")]),r._v(" CyclicBarrier简介")]),r._v(" "),c("p",[r._v("对于CountDownLatch，其他线程为游戏玩家，比如英雄联盟，主线程为控制游戏开始的线程。在所有的玩家都准备好之前，主线程是处于等待状态的，也就是游戏不能开始。当所有的玩家准备好之后，下一步的动作实施者为主线程，即开始游戏。 对于CyclicBarrier，假设有一家公司要全体员工进行团建活动，活动内容为翻越三个障碍物，每一个人翻越障碍物所用的时间是不一样的。但是公司要求所有人在翻越当前障碍物之后再开始翻越下一个障碍物，也就是所有人翻越第一个障碍物之后，才开始翻越第二个，以此类推。类比地，每一个员工都是一个“其他线程”。当所有人都翻越的所有的障碍物之后，程序才结束。而主线程可能早就结束了，这里我们不用管主线程。")])])}),[],!1,null,null,null);t.default=e.exports}}]);